name: Prep Az Module (local)

on:
  workflow_dispatch:

jobs:
  install-az:
    strategy:
      matrix:
        runner_label:
          - rhel-laptop
          - rhel-laptop-default-gh01
          - rhel-laptop-default-gh02
          - rhel-laptop-default-gh03

    runs-on:
      - self-hosted
      - ${{ matrix.runner_label }}

    steps:
    # 1Ô∏è‚É£ Set module path
    - name: Set PowerShell module path
      shell: bash
      run: |
        echo "LOCAL_PS_PATH=$HOME/.local/share/powershell/Modules" >> "$GITHUB_ENV"
        echo "PSModulePath=$HOME/.local/share/powershell/Modules:$PSModulePath" >> "$GITHUB_ENV"

    # 2Ô∏è‚É£ Clean old PackageManagement cache
    - name: Clean PackageManagement cache
      shell: bash
      run: rm -rf ~/.local/share/PackageManagement

    # 3Ô∏è‚É£ Create module path if needed
    - name: Ensure local module dir exists
      shell: bash
      run: mkdir -p "$LOCAL_PS_PATH"

    # 4Ô∏è‚É£ Cache Az and dependency modules
    - name: Cache Az modules
      uses: actions/cache@v4
      id: az-cache
      with:
        path: |
          ${{ env.LOCAL_PS_PATH }}
          ~/.local/share/PackageManagement
        key: az-modules-${{ hashFiles('**/module-version.txt') }}

    # 5Ô∏è‚É£ Install Az + dependencies (PowerShellGet, PackageManagement, NuGet)
    - name: Install Az (CurrentUser scope only)
      if: steps.az-cache.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        # Versions you trust
        $pgver = '2.2.5'
        $pmver = '1.4.8.1'

        # Install PackageManagement & PowerShellGet cleanly
        Write-Host "üîß Installing PackageManagement $pmver..."
        Install-Module PackageManagement -RequiredVersion $pmver -Scope CurrentUser -Force -Confirm:$false

        Write-Host "üîß Installing PowerShellGet $pgver..."
        Install-Module PowerShellGet -RequiredVersion $pgver -Scope CurrentUser -Force -Confirm:$false

        Import-Module PackageManagement -Force
        Import-Module PowerShellGet -Force

        # Register PSGallery if missing
        if (-not (Get-PackageSource -Name PSGallery -ErrorAction SilentlyContinue)) {
          Register-PSRepository -Name PSGallery `
            -SourceLocation "https://www.powershellgallery.com/api/v2" `
            -InstallationPolicy Trusted -Force
        }

        # Install NuGet provider
        if (-not (Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue)) {
          Install-PackageProvider -Name NuGet -Scope CurrentUser -Force
        }

        # Finally, install Az
        Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force -Confirm:$false

    # 6Ô∏è‚É£ Sanity check for Az
    - name: Verify Az import
      shell: pwsh
      run: |
        Import-Module Az.Accounts
        Get-Module Az.* | Select-Object Name, Version | Sort-Object Name

    # 7Ô∏è‚É£ Smoke test each Az module
    - name: Smoke-test Az modules (no Pester)
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = 'Tls12'

        $failures = @()

        Get-Module -ListAvailable -Name Az.* | ForEach-Object {
          try {
            Import-Module $_.Name -Force -ErrorAction Stop
            Write-Host "‚úÖ Imported $($_.Name)"
          }
          catch {
            Write-Error "‚ùå Failed to import $($_.Name): $($_.Exception.Message)"
            $failures += $_.Name
          }
        }

        if ($failures.Count -gt 0) {
          throw "One or more Az modules failed to import: $($failures -join ', ')"
        }
