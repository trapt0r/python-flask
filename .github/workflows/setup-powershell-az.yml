name: Prep Az Module (local)

on:
  workflow_dispatch:

jobs:
  install-az:
    strategy:
      matrix:
        runner_label:
          - rhel-laptop-default
          - rhel-laptop-default-gh01
          - rhel-laptop-default-gh02
          - rhel-laptop-default-gh03

    runs-on:
      - self-hosted
      - ${{ matrix.runner_label }}

    steps:
    # 1️⃣ Set local PowerShell module path for user scope
    - name: Set PowerShell module path
      shell: bash
      run: |
        echo "LOCAL_PS_PATH=$HOME/.local/share/powershell/Modules" >> "$GITHUB_ENV"
        echo "PSModulePath=$HOME/.local/share/powershell/Modules:$PSModulePath" >> "$GITHUB_ENV"

    # 2️⃣ Clear PackageManagement cache in case of bad bootstrap state
    - name: Clean PackageManagement cache
      shell: bash
      run: rm -rf ~/.local/share/PackageManagement

    # 3️⃣ Ensure local module directory exists
    - name: Ensure local module dir exists
      shell: bash
      run: mkdir -p "$LOCAL_PS_PATH"

    # 4️⃣ Cache Az modules and NuGet provider
    - name: Cache Az modules and NuGet
      uses: actions/cache@v4
      id: az-cache
      with:
        path: |
          ${{ env.LOCAL_PS_PATH }}
          ~/.local/share/PackageManagement
          ~/.local/share/powershell/Modules/NuGet
        key: az-modules-${{ hashFiles('**/module-version.txt') }}

    # 5️⃣ Install Az modules with manually bootstrapped NuGet provider
    - name: Install Az (CurrentUser scope only)
      if: steps.az-cache.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        $nugetUrl = "https://www.powershellgallery.com/api/v2/package/NuGet/2.8.5.208"
        $targetPath = "$env:HOME/.local/share/powershell/Modules/NuGet"

        # Pre-create module target folder
        mkdir -Force -Path $targetPath | Out-Null

        # Download and extract NuGet provider manually
        $nupkg = "$env:HOME/NuGet.2.8.5.208.nupkg"
        Invoke-WebRequest -Uri $nugetUrl -OutFile $nupkg
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::ExtractToDirectory($nupkg, $targetPath)
        Remove-Item $nupkg

        # Register PSGallery if needed
        if (-not (Get-PackageSource -Name PSGallery -ErrorAction SilentlyContinue)) {
          Register-PSRepository -Name PSGallery `
            -SourceLocation "https://www.powershellgallery.com/api/v2" `
            -InstallationPolicy Trusted -Force
        }

        # Import NuGet provider manually
        Import-PackageProvider -Name NuGet -RequiredVersion 2.8.5.208 -Force

        # Install Az module (finally!)
        Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force -Confirm:$false

    # 6️⃣ Basic module import verification
    - name: Verify Az import
      shell: pwsh
      run: |
        Import-Module Az.Accounts
        Get-Module Az.* | Select-Object Name, Version | Sort-Object Name

    # 7️⃣ Smoke test: ensure all Az modules import cleanly (no Pester)
    - name: Smoke-test Az modules (no Pester)
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = 'Tls12'

        $failures = @()

        Get-Module -ListAvailable -Name Az.* | ForEach-Object {
          try {
            Import-Module $_.Name -Force -ErrorAction Stop
            Write-Host "✅ Imported $($_.Name)"
          }
          catch {
            Write-Error "❌ Failed to import $($_.Name): $($_.Exception.Message)"
            $failures += $_.Name
          }
        }

        if ($failures.Count -gt 0) {
          throw "One or more Az modules failed to import: $($failures -join ', ')"
        }
