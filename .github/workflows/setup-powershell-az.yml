name: Prep Az Module (local)

on:
  workflow_dispatch:

jobs:
  install-az:
    strategy:
      matrix:
        runner_label:
          - rhel-laptop
          - rhel-laptop-default-gh01
          - rhel-laptop-default-gh02
          - rhel-laptop-default-gh03

    runs-on:
      - self-hosted
      - ${{ matrix.runner_label }}

    steps:
    # 1️⃣ Compute local install path and prepend it to PSModulePath
    - name: Set PowerShell module path
      shell: bash
      run: |
        echo "LOCAL_PS_PATH=$HOME/.local/share/powershell/Modules" >> "$GITHUB_ENV"
        echo "PSModulePath=$HOME/.local/share/powershell/Modules:$PSModulePath" >> "$GITHUB_ENV"

    # 2️⃣ Clean PackageManagement cache directory before PowerShell gets a chance to break on it
    - name: Clean PackageManagement cache
      shell: bash
      run: rm -rf ~/.local/share/PackageManagement

    # 3️⃣ Create module path if it doesn’t exist
    - name: Ensure local module dir exists
      shell: bash
      run: mkdir -p "$LOCAL_PS_PATH"

    # 4️⃣ Cache the Az modules and PackageManagement cache (optional, but recommended)
    - name: Cache Az modules
      uses: actions/cache@v4
      id: az-cache
      with:
        path: |
          ${{ env.LOCAL_PS_PATH }}
          ~/.local/share/PackageManagement
        key: az-modules-${{ hashFiles('**/module-version.txt') }}

    # 5️⃣ Install Az if cache was missed
    - name: Install Az (CurrentUser scope only)
      if: steps.az-cache.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    
        # Ensure NuGet provider is explicitly installed as a module
        if (-not (Get-PackageSource -Name PSGallery -ErrorAction SilentlyContinue)) {
          Register-PackageSource -Name PSGallery -ProviderName PowerShellGet -Location https://www.powershellgallery.com/api/v2 -Trusted -Force
        }
    
        if (-not (Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue)) {
          Install-Module -Name NuGet -Scope CurrentUser -Force -AllowClobber -Repository PSGallery
        }
    
        # Now install Az safely
        Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force -Confirm:$false


    # 6️⃣ Sanity check: ensure Az.Accounts at least imports cleanly
    - name: Verify Az import
      shell: pwsh
      run: |
        Import-Module Az.Accounts
        Get-Module Az.* | Select-Object Name, Version | Sort-Object Name

    # 7️⃣ Smoke-test all Az modules (no Pester, minimal and dependency-free)
    - name: Smoke-test Az modules (no Pester)
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = 'Tls12'

        $failures = @()

        Get-Module -ListAvailable -Name Az.* | ForEach-Object {
          try {
            Import-Module $_.Name -Force -ErrorAction Stop
            Write-Host "✅ Imported $($_.Name)"
          }
          catch {
            Write-Error "❌ Failed to import $($_.Name): $($_.Exception.Message)"
            $failures += $_.Name
          }
        }

        if ($failures.Count -gt 0) {
          throw "One or more Az modules failed to import: $($failures -join ', ')"
        }
