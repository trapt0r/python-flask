name: Prep Az Module (local)

on:
  workflow_dispatch:

jobs:
  install-az:
    strategy:
      matrix:
        runner_label:
          - rhel-laptop
          - rhel-laptop-default-gh01
          - rhel-laptop-default-gh02
          - rhel-laptop-default-gh03

    runs-on:
      - self-hosted
      - ${{ matrix.runner_label }}

    steps:
    # 1️⃣ Set up local module path and prepend to PSModulePath
    - name: Set PowerShell module path
      shell: bash
      run: |
        echo "LOCAL_PS_PATH=$HOME/.local/share/powershell/Modules" >> "$GITHUB_ENV"
        echo "PSModulePath=$HOME/.local/share/powershell/Modules:$PSModulePath" >> "$GITHUB_ENV"

    # 2️⃣ Clean any corrupt PackageManagement folder (avoids dynamic type crashes)
    - name: Clean PackageManagement cache
      shell: bash
      run: rm -rf ~/.local/share/PackageManagement

    # 3️⃣ Ensure local module dir exists
    - name: Ensure local module dir exists
      shell: bash
      run: mkdir -p "$LOCAL_PS_PATH"

    # 4️⃣ Cache Az modules and PackageManagement state
    - name: Cache Az modules
      uses: actions/cache@v4
      id: az-cache
      with:
        path: |
          ${{ env.LOCAL_PS_PATH }}
          ~/.local/share/PackageManagement
        key: az-modules-${{ hashFiles('**/module-version.txt') }}

    # 5️⃣ Install Az + bootstrap PowerShellGet and PackageManagement manually
    - name: Install Az (CurrentUser scope only)
      if: steps.az-cache.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        $base = "$env:HOME/.local/share/powershell/Modules"
        $pgver = [version]'2.2.5'
        $pmver = [version]'1.4.8.1'

        # Download PowerShellGet and PackageManagement manually if missing
        if (-not (Get-Module -ListAvailable -Name PackageManagement)) {
          Save-Module -Name PackageManagement -RequiredVersion $pmver -Repository PSGallery -Path $base -Force
        }

        if (-not (Get-Module -ListAvailable -Name PowerShellGet)) {
          Save-Module -Name PowerShellGet -RequiredVersion $pgver -Repository PSGallery -Path $base -Force
        }

        Import-Module "$base/PackageManagement/$pmver/PackageManagement.psd1" -Force
        Import-Module "$base/PowerShellGet/$pgver/PowerShellGet.psd1" -Force

        # Register PSGallery if needed
        if (-not (Get-PackageSource -Name PSGallery -ErrorAction SilentlyContinue)) {
          Register-PSRepository -Name PSGallery `
            -SourceLocation "https://www.powershellgallery.com/api/v2" `
            -InstallationPolicy Trusted -Force
        }

        # Install NuGet provider safely
        if (-not (Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue)) {
          Install-PackageProvider -Name NuGet -Scope CurrentUser -Force
        }

        # Now install Az
        Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force -Confirm:$false

    # 6️⃣ Sanity check that Az.Accounts loads
    - name: Verify Az import
      shell: pwsh
      run: |
        Import-Module Az.Accounts
        Get-Module Az.* | Select-Object Name, Version | Sort-Object Name

    # 7️⃣ Minimal smoke-test for all Az modules
    - name: Smoke-test Az modules (no Pester)
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = 'Tls12'

        $failures = @()

        Get-Module -ListAvailable -Name Az.* | ForEach-Object {
          try {
            Import-Module $_.Name -Force -ErrorAction Stop
            Write-Host "✅ Imported $($_.Name)"
          }
          catch {
            Write-Error "❌ Failed to import $($_.Name): $($_.Exception.Message)"
            $failures += $_.Name
          }
        }

        if ($failures.Count -gt 0) {
          throw "One or more Az modules failed to import: $($failures -join ', ')"
        }
