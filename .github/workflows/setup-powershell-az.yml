name: Prep Az Module (local)

on:
  workflow_dispatch:

jobs:
  install-az:
    strategy:
      matrix:
        runner_label:
          - rhel-laptop-default
          # - rhel-laptop-default-gh01
          # - rhel-laptop-default-gh02
          # - rhel-laptop-default-gh03

    runs-on:
      - self-hosted
      - ${{ matrix.runner_label }}

    steps:
    - name: Set PowerShell module path
      shell: bash
      run: |
        echo "LOCAL_PS_PATH=$HOME/.local/share/powershell/Modules" >> "$GITHUB_ENV"
        echo "PSModulePath=$HOME/.local/share/powershell/Modules:$PSModulePath" >> "$GITHUB_ENV"

    - name: Clean stale provider/module cache
      shell: bash
      run: |
        rm -rf ~/.local/share/PackageManagement
        rm -rf ~/.local/share/powershell/Modules/NuGet

    - name: Ensure local module dir exists
      shell: bash
      run: mkdir -p "$LOCAL_PS_PATH"

    - name: Cache Az modules and provider bootstraps
      uses: actions/cache@v4
      id: az-cache
      with:
        path: |
          ${{ env.LOCAL_PS_PATH }}
          ~/.local/share/PackageManagement
          ~/.local/share/powershell/Modules/NuGet
        key: az-modules-${{ hashFiles('**/module-version.txt') }}

    - name: Install Az (CurrentUser scope only)
      if: steps.az-cache.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        $nugetUrl = "https://www.powershellgallery.com/api/v2/package/NuGet/2.8.5.208"
        $targetPath = "$env:HOME/.local/share/powershell/Modules/NuGet"
        $nupkg = "$env:HOME/NuGet.2.8.5.208.nupkg"

        # Clean and prep NuGet path
        Remove-Item -Recurse -Force -ErrorAction SilentlyContinue $targetPath
        New-Item -ItemType Directory -Force -Path $targetPath | Out-Null

        # Download and extract NuGet package
        for ($i = 1; $i -le 3; $i++) {
          try {
            Write-Host "Attempt ${i}: Downloading NuGet.nupkg..."
            Invoke-WebRequest -Uri $nugetUrl -OutFile $nupkg -UseBasicParsing
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($nupkg, $targetPath)

            $nested = Join-Path $targetPath 'NuGet'
            if (Test-Path "$nested/NuGet.psd1") {
              Move-Item "$nested/*" $targetPath -Force
              Remove-Item $nested -Recurse -Force
            }

            Write-Host "‚úÖ Extracted and verified NuGet.psd1"
            break
          } catch {
            Write-Warning "‚ö†Ô∏è Attempt ${i} failed: $($_.Exception.Message)"
            if ($i -eq 3) {
              throw "‚ùå Failed to download and extract NuGet package after 3 attempts."
            }
            Start-Sleep -Seconds 2
          }
        }

        Remove-Item $nupkg -Force -ErrorAction SilentlyContinue

        # Register PSGallery if needed
        if (-not (Get-PSRepository -Name PSGallery -ErrorAction SilentlyContinue)) {
          Register-PSRepository -Name PSGallery `
            -SourceLocation "https://www.powershellgallery.com/api/v2" `
            -InstallationPolicy Trusted -Force
        }

        # Save PackageManagement to local path
        $pmVer = '1.4.8.1'
        $pmPath = "$env:HOME/.local/share/powershell/Modules"
        $pmImportPath = "$pmPath/PackageManagement/$pmVer"

        Write-Host "üß™ Saving PackageManagement $pmVer to: $pmImportPath"
        try {
          Save-Module -Name PackageManagement -RequiredVersion $pmVer `
                      -Repository PSGallery -Path $pmPath -Force -ErrorAction Stop
        } catch {
          throw "‚ùå Save-Module failed: $($_.Exception.Message)"
        }

        $pmManifest = Join-Path $pmImportPath "PackageManagement.psd1"
        if (-not (Test-Path $pmManifest)) {
          Write-Warning "‚ùå Expected .psd1 file not found at: $pmManifest"
          Write-Host "üìÅ Directory contents:"
          Get-ChildItem -Recurse -Path $pmImportPath | Format-List
          throw "‚ùå PackageManagement.psd1 missing after Save-Module"
        }

        # Import module by directory path
        Write-Host "üîß Importing PackageManagement from: $pmImportPath"
        Import-Module $pmImportPath -Force
        Write-Host "üìã Exported cmdlets:"
        Get-Command -Module PackageManagement | Select-Object Name | Sort-Object | Format-Table

        # Register NuGet provider
        $nugetProviderPath = Join-Path $targetPath 'NuGet.psd1'
        Register-PackageProvider -Name NuGet -Manifest $nugetProviderPath -Force
        Write-Host "‚úÖ NuGet provider registered manually"

        # Install Az module
        Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force -Confirm:$false
        Write-Host "‚úÖ Az module installed"

    - name: Smoke-test Az module imports
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        $failures = @()
        Get-Module -ListAvailable -Name Az.* | ForEach-Object {
          try {
            Import-Module $_.Name -Force -ErrorAction Stop
            Write-Host "‚úÖ Imported $($_.Name)"
          } catch {
            Write-Error "‚ùå Failed to import $($_.Name): $($_.Exception.Message)"
            $failures += $_.Name
          }
        }

        if ($failures.Count -gt 0) {
          throw "‚ùå One or more Az modules failed to import: $($failures -join ', ')"
        }
