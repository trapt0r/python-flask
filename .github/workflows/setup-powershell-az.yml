name: Prep Az Module (local)

on:
  workflow_dispatch:

jobs:
  install-az:
    # ‚îÄ‚îÄ 1 Ô∏è‚É£  Matrix list written in block-style to avoid flow-style quirks
    strategy:
      matrix:
        runner_label:
          - rhel-laptop-default
          - rhel-laptop-default-gh01
          - rhel-laptop-default-gh02
          - rhel-laptop-default-gh03

    # ‚îÄ‚îÄ 2 Ô∏è‚É£  Block-style list here as well; safer than quoting expressions
    runs-on:
      - self-hosted
      - ${{ matrix.runner_label }}

    steps:
    # ‚îÄ‚îÄ 3 Ô∏è‚É£  Resolve $HOME once, export LOCAL_PS_PATH and PSModulePath for the job
    - name: Compute module path
      shell: bash
      run: |
        echo "LOCAL_PS_PATH=$HOME/.local/share/powershell/Modules" >> "$GITHUB_ENV"
        echo "PSModulePath=$HOME/.local/share/powershell/Modules:$PSModulePath" >> "$GITHUB_ENV"

    - name: Ensure local module dir exists
      run: mkdir -p "$LOCAL_PS_PATH"

    # ‚îÄ‚îÄ 4 Ô∏è‚É£  Cache the Az modules so future runs are near-instant
    - name: Cache Az modules
      uses: actions/cache@v4
      id: az-cache
      with:
        path: ${{ env.LOCAL_PS_PATH }}
        key: az-modules-${{ hashFiles('**/module-version.txt') }}

    # ‚îÄ‚îÄ 5 Ô∏è‚É£  Install only if cache missed; force TLS 1.2 so Gallery handshake works
    - name: Install Az (CurrentUser scope only)
      if: steps.az-cache.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        if (-not (Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue)) {
          Install-PackageProvider -Name NuGet -Scope CurrentUser -Force
        }

        Install-Module PowerShellGet -Scope CurrentUser -Force -AllowClobber -Confirm:$false
        Install-Module Az -Scope CurrentUser -Repository PSGallery -Force -Confirm:$false
        # ~200 MB first time; <1 MB once cached

    # ‚îÄ‚îÄ 6 Ô∏è‚É£  Quick smoke test
    - name: Verify Az import
      shell: pwsh
      run: |
        Import-Module Az.Accounts
        Get-Module Az.* | Select-Object Name,Version | Sort-Object Name
        
    # --------------------------------------------------------------------
    # üîç  Smoke-test: every Az module must import cleanly (no Azure login)
    # --------------------------------------------------------------------
    - name: Pester smoke-test Az modules import cleanly
      shell: pwsh
      env:
        PSModulePath: ${{ env.PSModulePath }}   # points to ~/.local/share/‚Ä¶
      run: |
        $ErrorActionPreference = 'Stop'
        [Net.ServicePointManager]::SecurityProtocol = 'Tls12'
    
        # 1Ô∏è‚É£ Ensure Pester ‚â• 5.5 is available for the current user
        $reqVersion = [version]'5.5.0'
        if (-not (Get-Module -ListAvailable Pester | Where-Object Version -ge $reqVersion)) {
          Install-Module Pester -Scope CurrentUser -MinimumVersion $reqVersion `
                                -Force -SkipPublisherCheck -Confirm:$false
        }
    
        # 2Ô∏è‚É£ Unload any older Pester already in memory, then import 5.x explicitly
        Remove-Module Pester -ErrorAction SilentlyContinue -Force
        Import-Module Pester -MinimumVersion $reqVersion -Force
    
        # 3Ô∏è‚É£ Inline test: every Az.* module must import without throwing
        Invoke-Pester -Configuration @{ Run = @{ Exit = $true } } -ScriptBlock {
          Describe 'Az modules load' {
            Get-Module -ListAvailable -Name Az.* | ForEach-Object {
              It "$($_.Name) imports without error" {
                { Import-Module $_.Name -Force } | Should -Not -Throw
              }
            }
          }
        }

